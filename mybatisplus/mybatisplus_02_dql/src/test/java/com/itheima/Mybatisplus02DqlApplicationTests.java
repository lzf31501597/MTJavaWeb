package com.itheima;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.itheima.dao.UserDao;import com.itheima.domain.User;import com.itheima.domain.query.UserQuery;import com.mysql.cj.Query;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.boot.test.context.SpringBootTest;import java.util.List;import java.util.Map;@SpringBootTestclass Mybatisplus02DqlApplicationTests {    @Autowired    private UserDao userDao;    @Test    void testGetAll() {        //方式一：按条件查询        /*QueryWrapper queryWrapper = new QueryWrapper();        queryWrapper.lt("age", 18);        List<User> users = userDao.selectList(queryWrapper);        System.out.println(users);*/        //方式二：lambda格式按条件查询        /*QueryWrapper<User> queryWrapper = new QueryWrapper();        queryWrapper.lambda().lt(User::getAge, 18);        List<User> users = userDao.selectList(queryWrapper);        System.out.println(users);*/        //方式三：lambda格式按条件查询        /*LambdaQueryWrapper<User> lambdaQueryWrapper = new LambdaQueryWrapper<>();        lambdaQueryWrapper.lt(User::getAge, 18);        List<User> users = userDao.selectList(lambdaQueryWrapper);        System.out.println(users);*/        // 10<age<30        /*LambdaQueryWrapper<User> lambdaQueryWrapper = new LambdaQueryWrapper<>();        lambdaQueryWrapper.lt(User::getAge, 30);        lambdaQueryWrapper.gt(User::getAge, 10);*/        //lambdaQueryWrapper.lt(User::getAge, 30).gt(User::getAge, 10);        // age<18 , age>20        /*LambdaQueryWrapper<User> lambdaQueryWrapper = new LambdaQueryWrapper<>();        lambdaQueryWrapper.gt(User::getAge, 18).or().lt(User::getAge, 20);        List<User> users = userDao.selectList(lambdaQueryWrapper);        System.out.println(users);*/        //模拟页面传递过来的查询数据        /*UserQuery userQuery = new UserQuery();        //userQuery.setAge(18);        userQuery.setAge2(20);*/        //null值判定        /*LambdaQueryWrapper<User> lambdaQueryWrapper = new LambdaQueryWrapper<>();        lambdaQueryWrapper.lt(User::getAge, userQuery.getAge2());        if (null != userQuery.getAge()) {            lambdaQueryWrapper.gt(User::getAge, userQuery.getAge());        }        List<User> users = userDao.selectList(lambdaQueryWrapper);        System.out.println(users);*/        //lambdaQueryWrapper.lt(User::getAge, userQuery.getAge2());        //先判定第一个参数是否为true，如果为true链接当前条件        /*lambdaQueryWrapper.lt(null != userQuery.getAge2(), User::getAge, userQuery.getAge2());        lambdaQueryWrapper.gt(null != userQuery.getAge(), User::getAge, userQuery.getAge());*/        /*lambdaQueryWrapper.lt(null != userQuery.getAge2(), User::getAge, userQuery.getAge2())                          .gt(null != userQuery.getAge(), User::getAge, userQuery.getAge());        List<User> users = userDao.selectList(lambdaQueryWrapper);        System.out.println(users);*/        //查询投影        //LambdaQueryWrapper<User> lambdaQueryWrapper = new LambdaQueryWrapper<>();        //lambdaQueryWrapper.select(User::getId, User::getName, User::getAge);        /*QueryWrapper<User> queryWrapper = new QueryWrapper<>();        queryWrapper.select("id", "name", "age", "tel");        List<User> users = userDao.selectList(queryWrapper);        System.out.println(users);*/        /*QueryWrapper<User> queryWrapper = new QueryWrapper<>();        queryWrapper.select("count(*) as count, tel");        queryWrapper.groupBy("tel");        List<Map<String, Object>> maps = userDao.selectMaps(queryWrapper);        System.out.println(maps);*/        /*LambdaQueryWrapper<User> lambdaQueryWrapper = new LambdaQueryWrapper<>();        //等同于=        lambdaQueryWrapper.eq(User::getName, "Jerry").eq(User::getPassword, "jerry1");        //List<User> users = userDao.selectList(lambdaQueryWrapper);        User users = userDao.selectOne(lambdaQueryWrapper);        System.out.println(users);        *//*List<Map<String, Object>> maps = userDao.selectMaps(lambdaQueryWrapper);        System.out.println(maps);*/        //范围查询，lt、le、gt、ge、eq、between        /*LambdaQueryWrapper<User> lambdaQueryWrapper = new LambdaQueryWrapper<>();        lambdaQueryWrapper.between(User::getAge, 8, 30);        List<User> users = userDao.selectList(lambdaQueryWrapper);        System.out.println(users);*/        //模糊匹配 like        /*LambdaQueryWrapper<User> lambdaQueryWrapper = new LambdaQueryWrapper<>();        //lambdaQueryWrapper.like(User::getName, "Tom");        //lambdaQueryWrapper.likeRight(User::getName, "T");        lambdaQueryWrapper.likeLeft(User::getName, "m");        List<User> users = userDao.selectList(lambdaQueryWrapper);        System.out.println(users);*/        LambdaQueryWrapper<User> lambdaQueryWrapper = new LambdaQueryWrapper<>();        List<User> users = userDao.selectList(lambdaQueryWrapper);        System.out.println(users);    }}